(defun setupPieces ()
  (let ((Array ()))
    (dotimes (r 8)
      (let ((row ()))
      (dotimes (c 8)
        (if (not (or (= r 3) (= r 4)))
            (progn
            (if (and (= (mod r 2) 0) (= (mod c 2) 1))
                (progn
                  (let ((owner 0))
                  (if (> r 3)
                      (setq owner 1)
                    )
                    (setq row (append row (list (make-piece :owner owner :location (list r c)))))
                  )
                  )
              )
          (if (and (= (mod r 2) 1) (= (mod c 2) 0))
                (progn
                  (let ((owner 0))
                  (if (> r 3)
                      (setq owner 1)
                    )
                    (setq row (append row (list (make-piece :owner owner :location (list r c)))))
                  )
                  )
              )
              )
          (setq row (list nil nil nil nil nil nil nil nil))
          )
        )
        (setq Array (append Array (list row)))
        )
      )
    (setq Array Array)
    )
  )